import datetime
import random

class Flight:
    def __init__(self, flight_number, origin, destination, departure_time, total_seats, base_prices):
        self.flight_number = flight_number
        self.origin = origin
        self.destination = destination
        self.departure_time = departure_time
        self.total_seats = total_seats
        self.available_seats = {'Economy': total_seats // 2, 'Business': total_seats // 3, 'First Class': total_seats // 6}
        self.base_prices = base_prices  # Base prices for different classes

    def calculate_dynamic_price(self, seat_class):
        """Calculates ticket price based on time, availability, and demand."""
        time_remaining = (self.departure_time - datetime.datetime.now()).days
        demand_factor = random.uniform(1.0, 2.0)  # Simulating demand
        availability_factor = (self.total_seats - sum(self.available_seats.values())) / self.total_seats
        competitor_factor = random.uniform(0.9, 1.1)  # Simulating market variation

        # Base price for the selected class
        base_price = self.base_prices[seat_class]

        # Adjust price based on seat availability and demand
        price = base_price * (1 + availability_factor) * demand_factor * competitor_factor

        # Increase price as flight date gets closer
        if time_remaining < 7:
            price *= 1.5  # 50% increase for last-minute bookings
        elif time_remaining < 30:
            price *= 1.2  # 20% increase for near departures

        return round(price, 2)

    def book_ticket(self, seat_class):
        """Books a ticket for the selected class if available."""
        if self.available_seats[seat_class] > 0:
            ticket_price = self.calculate_dynamic_price(seat_class)
            self.available_seats[seat_class] -= 1
            return f"Ticket booked in {seat_class}! Price: ${ticket_price}"
        else:
            return f"No seats available in {seat_class} class!"

    def flight_info(self):
        """Returns flight details with class-wise seat availability."""
        return (f"Flight {self.flight_number} | {self.origin} â†’ {self.destination} | "
                f"Departure: {self.departure_time.strftime('%Y-%m-%d %H:%M')} | "
                f"Seats Left: Economy={self.available_seats['Economy']}, "
                f"Business={self.available_seats['Business']}, "
                f"First Class={self.available_seats['First Class']}")

# Example Usage
if __name__ == "__main__":
    flight1 = Flight(
        "AI101", "New York", "London", datetime.datetime(2025, 6, 15, 14, 30),
        total_seats=120,
        base_prices={'Economy': 500, 'Business': 1000, 'First Class': 2000}
    )

    print(flight1.flight_info())  # Display flight details

    # Simulating ticket booking for different classes
    print(flight1.book_ticket("Economy"))
    print(flight1.book_ticket("Business"))
    print(flight1.book_ticket("First Class"))

    print(flight1.flight_info())  # Updated flight details
