import hashlib
import sqlite3
import os

# Database setup (using a file for persistence)
DATABASE_FILE = "airline.db"

def create_tables():
    """Creates the users, flights, and reservations tables if they don't exist."""
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT UNIQUE,
            password_hash TEXT,
            salt TEXT
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS flights (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            flight_number TEXT UNIQUE,
            destination TEXT,
            seats INTEGER
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS reservations (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            flight_id INTEGER,
            seat_number INTEGER,
            FOREIGN KEY(user_id) REFERENCES users(id),
            FOREIGN KEY(flight_id) REFERENCES flights(id)
        )
    """)
    conn.commit()
    conn.close()

def generate_salt():
    """Generates a random salt for password hashing."""
    return os.urandom(16).hex()

def hash_password(password, salt):
    """Hashes a password using SHA-256 with a salt."""
    salted_password = salt.encode() + password.encode()
    return hashlib.sha256(salted_password).hexdigest()

def register_user(username, password):
    """Registers a new user with a salt."""
    salt = generate_salt()
    hashed_password = hash_password(password, salt)
    try:
        conn = sqlite3.connect(DATABASE_FILE)
        cursor = conn.cursor()
        cursor.execute("INSERT INTO users (username, password_hash, salt) VALUES (?, ?, ?)", (username, hashed_password, salt))
        conn.commit()
        conn.close()
        return True, "Registration successful."
    except sqlite3.IntegrityError:
        return False, "Username already exists."
    except Exception as e:
        return False, f"Registration failed: {e}"

def authenticate_user(username, password):
    """Authenticates a user using the stored salt."""
    try:
        conn = sqlite3.connect(DATABASE_FILE)
        cursor = conn.cursor()
        cursor.execute("SELECT id, password_hash, salt FROM users WHERE username = ?", (username,))
        user = cursor.fetchone()
        conn.close()

        if user:
            user_id, stored_hash, salt = user
            hashed_password = hash_password(password, salt)
            if hashed_password == stored_hash:
                return True, "Authentication successful.", user_id
            else:
                return False, "Invalid username or password.", None
        else:
            return False, "Invalid username or password.", None
    except Exception as e:
        return False, f"Authentication failed: {e}", None

# Example usage
create_tables()
print(register_user("testuser", "testpassword"))
print(authenticate_user("testuser", "testpassword"))
